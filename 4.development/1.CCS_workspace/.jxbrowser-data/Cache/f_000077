
<!--
    Copyright (c) 2015, Texas Instruments Incorporated
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

    *   Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
    *   Neither the name of Texas Instruments Incorporated nor the names of
        its contributors may be used to endorse or promote products derived
        from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
    OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
    OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
    EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<link rel="import" href="../polymer/polymer.html">

<link rel="import" href="../ti-core-assets/ti-core-assets.html">
<script src="agent.js"></script>
<link rel="import" href="ti-core-backplane-installdialog.html">

<link rel="import" href="../ti-widget-statusbar/ti-widget-statusbar.html">
<link rel="import" href="../iron-icons/iron-icons.html">

<link rel="import" href="../paper-progress/paper-progress.html">
<link rel="import" href="../paper-tooltip/paper-tooltip.html">
<!--
`ti-core-backplane` establishes communication between the browser and TI Cloud Agent
    - used to start/stop services on TI Cloud Agent
    - provides TI Cloud Agent installation files for Windows, Linux and Mac
    - handles discovery process and websocket port negotiation with TI Cloud Agent
    - provides events to tell application when to display connect / disconnect / download TI Cloud Agent buttons
    - provides APIs for application to call in order to initiate connect / disconnect actions

Example:

    <ti-core-backplane></ti-core-backplane>

See demo for a full working example of how to use this component.

@group Ti Elements
@element ti-core-backplane
@homepage elements/ti-guicomposer-helpindex/demo.html
@hero hero.svg
@demo demo.html
-->
<dom-module id='ti-core-backplane'  >
    <template id="backplaneTemplate">
    </template>
    <script>
        var gc = gc || {};
        if (window.parent.gc)
        {
            // take the designer from the parent iframe, if available.
            gc.designer = gc.designer || window.parent.gc.designer;
            gc.desktop = gc.desktop || window.parent.gc.desktop;
        }
        if (window.global && global.document && global.document.gc)
        {
            // take the designer from the global node-webkit document if available
            gc.designer = gc.designer || global.document.gc.designer;
            gc.desktop = gc.desktop || global.document.gc.desktop;
        }

        Polymer ({
            is: 'ti-core-backplane',

            _self: undefined,
            agent: undefined,
            ds: undefined,
            file: null,
            isDebugServerConfigured: false,
            isErrorPending: false,
            cores: undefined,
            core: undefined,
            portFailure: null,
            portRequested: false,
            deleteStatusBarUponDetach: false,
            myTimeout: null,
            progressPercent: 0,
            statusBar: undefined,
            _target: undefined,
            supportedDevices: undefined,
            selectedDevicCcxmlString: undefined,
            states: [
                {
                    'name': 'disconnected',
                    'statusString': 'Disconnected.',
                    'waitForUser': true,
                    'caption': 'Connect',
                    'skip': false,
                    'events': {
                        'gotoNextState': 'connectingToCloudAgent',
                        'onConnectBtnClicked': 'connectingToCloudAgent',
                        'onCloudAgentConnected': 'ready',
                        'onFailedToConnect': 'failedToConnect',
                        'onOpenInstallDialog': 'downloadTICloudAgent',
                        'onDisconnectBtnClicked': 'disconnected',
                        'onError': 'error'
                    }
                },
                {
                    'name': 'connectingToCloudAgent',
                    'statusString': 'Connecting...',
                    'caption': 'Disconnect',
                    'waitForUser': false,
                    'skip': false,
                    'events': {
                        'gotoNextState': 'ready',
                        'onCloudAgentConnected': 'ready',
                        'onFailedToConnect': 'failedToConnect',
                        'onOpenInstallDialog': 'downloadTICloudAgent',
                        'onError': 'error'
                    }
                },
                {
                    'name': 'ready',
                    'statusString': ( (typeof process !== "undefined") ? "Connected." :"Connected to TI Cloud Agent."),
                    'caption': 'Ready',
                    'waitForUser': true,
                    'skip': false,
                    'events': {
                        'gotoNextState': 'disconnect',
                        'onFailedToConnect': 'failedToConnect',
                        'onOpenInstallDialog': 'downloadTICloudAgent',
                        'onDisconnectBtnClicked': 'disconnect',
                        'onError': 'error'
                    }
                },
                {
                    'name': 'failedToConnect',
                    'statusString': ( (typeof process !== "undefined") ? "Timeout waiting for connection to debug agent:" :"Could not connect to target:"),
                    'caption': ( (typeof process !== "undefined") ?'Timeout waiting for connection to agent':'Download TI Cloud Agent'),
                    'waitForUser': true,
                    'skip': false,
                    'events': {
                        'gotoNextState': 'disconnect',
                        'onInstallerDownloaded': 'disconnected',
                        'onFailedToConnect': 'failedToConnect',
                        'onOpenInstallDialog': 'downloadTICloudAgent',
                        'onDisconnectBtnClicked': 'disconnect',
                        'onConnectBtnClicked': 'connectingToCloudAgent'
                    }
                },
                {
                    'name': 'downloadTICloudAgent',
                    'statusString': ( (typeof process !== "undefined") ? "Timeout waiting for connection to debug agent:" :"Could not connect to target:"),
                    'caption': ( (typeof process !== "undefined") ?'Timeout waiting for connection to agent':'Download TI Cloud Agent'),
                    'waitForUser': true,
                    'skip': false,
                    'events': {
                        'gotoNextState': 'disconnect',
                        'onInstallerDownloaded': 'disconnected',
                        'onFailedToConnect': 'failedToConnect',
                        'onOpenInstallDialog': 'downloadTICloudAgent',
                        'onDisconnectBtnClicked': 'disconnect',
                        'onConnectBtnClicked': 'connectingToCloudAgent'
                    }
                },
                {
                    'name': 'disconnect',
                    'statusString': 'Disconnect',
                    'caption': 'Disconnect',
                    'waitForUser': true,
                    'skip': false,
                    'events': {
                        'gotoNextState': 'disconnected',
                        'onDisconnectBtnClicked': 'disconnected',
                        'onFailedToConnect': 'failedToConnect',
                        'onOpenInstallDialog': 'downloadTICloudAgent',
                        'disconnectComplete': 'disconnected'
                    }
                },
                {
                    'name': 'error',
                    'statusString': 'Backplane Error',
                    'caption': 'Error',
                    'waitForUser': true,
                    'skip': false,
                    'events': {
                        'gotoNextState': 'disconnect',
                        'onConnectBtnClicked': 'error',
                        'onFailedToConnect': 'error',
                        'onDisconnectBtnClicked': 'error'
                    }
                }

            ],
            userActions: ['onConnectBtnClicked', 'onUserSaysDevicePluggedIn', 'onInstallerDownloadBtnClicked', 'onDisconnectBtnClicked','onFailedToConnect','onOpenInstallDialog'],
            stateIndexes: {},
            prevState: undefined,


            // For info on Polymer published properties, please see https://groups.google.com/forum/#!msg/polymer-dev/IX_gvSQT78Y/UtxDo-M2H6MJ
            // and http://stackoverflow.com/questions/23861029/how-does-data-binding-in-polymer-work

            /**
             * Fired when the currentState changes.
             *
             * @event currentStateChanged
             */
            /**
             * Fired when the status caption changes.
             *
             * @event statusMessageChanged
             */
            /**
             * Fired when the client needs to show a 'unplug device and plug it back in' message.
             *
             * @event onReplugNeeded
             */
            /**
             * Fired when the client needs to show the Download TI Cloud Agent button
             *
             * @event onShowTICloudAgentDownloadBtn
             */
            /**
             * Fired when the visibility of one of the buttons in the application that is associated
             * with ti-core-cloudagent needs to be changed
             *
             * @event btnVisibilityChanged
             */
            /**
             * Fired when the client has timed out trying to connect with the cloud agent
             *
             * @event onTimeoutWaitingForCloudAgent
             */
            hostAttributes: {
            },

            properties: {
                /**
                 * An object that represents the device that is being interacted with.
                 * The object must have the following fields:
                 *  <p> {<br/>
                         *   boardName:     'MSP-EXP430G2 v1.5',<br/>
                         *   deviceName:      'MSP430G2553',<br/>
                         *   fileName:      'ReadTempAndSendToSerialPort.cpp.hex',<br/>
                         *   ccxmlString:   'the target ccxml file serialized as a string'<br/>
                         *   ccxmlFileName: 'name to use for the ccxml file to be used by TICloudAgent'
                         *   runTargetToReadMemory: 'true if a monitor on the target is used to read target memory'
                         *   runFree: 'true if a uart_connection is used to communicate with the monitor on the target'
                         *
                         *   }<br/>
                 *   <p>Additional fields can be added for other device-specific information.  e.g.
                 *   {
                         *   startBtnName:  'Name of button to press to start target running: e.g. P1.3',<br/>
                         *   boardImage:    'Name of image file of target board to display e.g. launchpad-mspexp430g2-02.jpg',<br/>
                         *   startBtnImage  'Name of image file showing location of start button e.g. startbutton-mspexp430g2-02.jpg'<br/>
                         *   }<br/>
                 * <p>
                 *
                 * @attribute selectedDevice
                 * @type object
                 * @default undefined
                 */
                selectedDevice: {
                    notify: true,
                    type: Object,
                    value: undefined,
                    observer: "selectedDeviceChanged"
                },
                /**
                 * Controls whether the progress bar is visible or not.
                 *
                 * @attribute progressBarEnabled
                 * @type boolean
                 * @default false
                 */
                progressBarEnabled: {
                    notify: true,
                    type: Boolean,
                    value: false,
                    observer: "_progressBarEnabledChanged"
                },
                /**
                 * A value (0-100) that represents the percentage complete to show in the progress bar.
                 *
                 * @attribute progress
                 * @type number
                 * @default 0
                 */
                progress: {
                    notify: true,
                    type: Number,
                    value: 0
                },
                /**
                 * Determines whether ti-core-backplane automatically hides the status bar upon
                 * connection to the TICloudAgent (true) or whether it leaves this up to external code (false)
                 *
                 * @attribute autoHideProgressBar
                 * @type boolean
                 * @default true
                 */
                autoHideProgressBar: {
                    notify: true,
                    type: Boolean,
                    value: true
                },
                /**
                 * The first status string to display in the status bar text field
                 *
                 * @attribute statusString1
                 * @type string
                 * @default ""
                 */
                statusString1: {
                    notify: true,
                    type: String,
                    value: "",
                    observer: "statusString1Changed"
                },
                /**
                 * The tooltip text for the first status string to display in the status bar text field
                 *
                 * @attribute tooltipStatusString1
                 * @type string
                 * @default ""
                 */
                tooltipStatusString1: {
                    notify: true,
                    type: String,
                    value: ""
                },
                /**
                 * The second status string to display in the status bar text field
                 *
                 * @attribute statusString2
                 * @type string
                 * @default ""
                 */
                statusString2: {
                    notify: true,
                    type: String,
                    value: "",
                    observer: "statusString2Changed"
                },
                /**
                 * The tooltip text for the second status string to display in the status bar text field
                 *
                 * @attribute tooltipStatusString2
                 * @type string
                 * @default ""
                 */
                tooltipStatusString2: {
                    notify: true,
                    type: String,
                    value: ""
                },
                /**
                 * The third status string to display in the status bar text field
                 *
                 * @attribute statusString3
                 * @type string
                 * @default ""
                 */
                statusString3: {
                    notify: true,
                    type: String,
                    value: "",
                    observer: "statusString3Changed"
                },
                /**
                 * The tooltip text for the third status string to display in the status bar text field
                 *
                 * @attribute tooltipStatusString3
                 * @type string
                 * @default ""
                 */
                tooltipStatusString3: {
                    notify: true,
                    type: String,
                    value: ""
                },

                /**
                 * The string to display as a tooltip when the mouse hovers over the icon.  empty to display nothing
                 *
                 * @attribute tooltipIconImage
                 * @type string
                 * @default ""
                 */
                tooltipIconImage: {
                    notify: true,
                    type: String,
                    value: "",
                    observer: "tooltipIconImageChanged"
                },
                /**
                 * the current state of the backplane's state machine.
                 *
                 * @attribute currentState
                 * @type object
                 * @default undefined
                 */
                currentState: {
                    notify: true,
                    type: Object,
                    value: undefined,
                    observer: "_currentStateChanged"
                },
                /**
                 * if true, uses wss:// secure websocket communication protocol, else uses normal ws://
                 *
                 * @attribute isSecureWebPage
                 * @type boolean
                 * @default 'false.'
                 */
                isSecureWebPage: {
                    notify: true,
                    type: Boolean,
                    value: true
                },

                /**
                 * a string representing the current status of the interactions with the target device.
                 *
                 * @attribute status
                 * @type string
                 * @default 'Disconnected.'
                 */
                status: {
                    notify: true,
                    type: String,
                    value: ""
                },

                /**
                 * isConnectedToCloudAgent is false when not connected to TI Cloud Agent.
                 * If your application has a 'connect' button, it should show 'Connect' as the
                 * caption when isConnectedToCloudAgent is false, and 'Disconnect' when
                 * isConnectedToCloudAgent is true.
                 *
                 * @attribute isConnectedToCloudAgent
                 * @type boolean
                 * @default false
                 */
                isConnectedToCloudAgent: {
                    notify: true,
                    type: Boolean,
                    value: false
                },
                /**
                 * isConnectBtnVisible indicates whether a button labeled 'Connect' with an on-click handler
                 * of onConnectBtnClicked should be displayed or not.
                 *
                 * @attribute isConnectBtnVisible
                 * @type boolean
                 * @default true
                 */
                isConnectBtnVisible: {
                    notify: true,
                    type: Boolean,
                    value: true
                },
                /**
                 * isDisonnectBtnVisible indicates whether a button labeled 'Cisconnect' with an on-click handler
                 * of onDisconnectBtnClicked should be displayed or not.
                 *
                 * @attribute isDisconnectBtnVisible
                 * @type boolean
                 * @default false
                 */
                isDisconnectBtnVisible: {
                    notify: true,
                    type: Boolean,
                    value: false
                },
                /**
                 * isCloudAgentDownloadBtnVisible indicates whether a button labeled 'Download TI Cloud Agent' with an on-click handler
                 * of onCloudAgentDownloadBtnClicked should be displayed or not.
                 *
                 * @attribute isCloudAgentDownloadBtnVisible
                 * @type boolean
                 * @default false
                 */
                isCloudAgentDownloadBtnVisible: {
                    notify: true,
                    type: Boolean,
                    value: false
                },
                /**
                 * isDesktop indicates whether the application is being hosted by node-webkit (true)
                 * or a web server such as Resource Explorer (false).
                 *
                 * @attribute isDesktop
                 * @type boolean
                 * @default false
                 */
                isDesktop: {
                    notify: true,
                    type: Boolean,
                    value: false
                }
            },
            _progressBarEnabledChanged: function() {
                console.log("ti-core-backplane: showProgressBar = "+this.progressBarEnabled);
                if ((this.statusBar !== undefined)&&(this.statusBar !== null)) {
                    if (!this.progressBarEnabled) {
                        this.hideProgressBar();
                    } else {
                        this.statusBar.progressBarEnabled = true;
                    }
                }
            },
            progressBarEnabledChanged: undefined,
            _hideProgressBar: function()  {
                if (this.myTimeout) {
                    window.clearTimeout(this.myTimeout);
                }
                this.progressPercent = 0.0;
                if ((this.statusBar !== undefined)&&(this.statusBar !== null)) {
                    this.statusBar.progress = 0;
                    // enable firing iconclicked event when user clicks the statusbar icon
                    this.statusBar.iconEnabled = true;
                    this.statusBar.progressBarEnabled = false; //hide the progress bar
                }
                this.progressBarEnabled = false;
            },
            hideProgressBar: undefined,
            _inDesigner: false,
            tooltipIconImageChanged: function(){
                if ((this.statusBar !== undefined)&&(this.statusBar !== null)) {
                    this.statusBar.tooltipIconImage = this.tooltipIconImage;
                }
            },
            statusString1Changed: function(){
                if ((this.statusBar !== undefined)&&(this.statusBar !== null) && (!this._inDesigner)) {
                    this.statusBar.statusString1 = this.statusString1;
                }
            },
            statusString2Changed: function(){
                // Filter out messages that have already been displayed in statusString1
                // e.g. status messages that have been propagated to services
                if ((this.statusBar !== undefined)&&(this.statusBar !== null) && (!this._inDesigner)) {
                    if ((this.statusString2 !== this.statusString1) || (this.statusString2.length === 0)) {
                        this.statusBar.statusString2 = this.statusString2;
                    }
                }
            },
            statusString3Changed: function(){
                if ((this.statusBar !== undefined)&&(this.statusBar !== null) && (!this._inDesigner)) {
                    this.statusBar.statusString3 = this.statusString3;
                }
            },
            selectedDeviceChanged: function(){
                if (this.selectedDevice) {
                    // for backwards compatibility with older application code htat uses chipName instead of deviceName:
                    if ((this.selectedDevice.deviceName === undefined) && (this.selectedDevice.chipName !== undefined)){
                        this.selectedDevice.deviceName = this.selectedDevice.chipName;
                        this.selectedDevice.xmlDeviceName = this.selectedDevice.deviceName;
                    }
                    if (this.selectedDevice.boardName === undefined) {
                        this.selectedDevice.boardName = this.selectedDevice.deviceName;
                    }
                    if ((this.selectedDevice.deviceName) &&(this.selectedDevice.deviceName !== 0)) {
                        this.setSelectedDevice(this.selectedDevice.deviceName);
                    }
                }
            },
            _setStatus: function (strStatus) {
                this.status = strStatus;
                this.fire('statusMsgUpdated');
            },
            setStatus: undefined,
            _setErrorStatus: function(strErrorName, strErrorText){
                if (this.isStatusBar()) {
                    this.setIcon("error");
                    this.statusString1 = strErrorName;
                    this.statusString2 = strErrorText;
                    this.statusString3 = "";
                    this.tooltipIconImage = strErrorName + ', '+strErrorText;
                    this.hideProgressBar(); // ensure icon can be clicked
                }
                // Ensure the state machine is put into the correct state for recovery
                this.updateStateMachine('onError');
            },
            setErrorStatus: undefined,
            _connect: function(optional_selectedDevice){
                if (optional_selectedDevice){
                    this.selectedDevice = optional_selectedDevice;
                }
                console.log('ti-core-backplane.connect called.  Current state = '+this.currentState.name)
                if (this.currentState.name === 'disconnected') {
                    this.updateStateMachine('onConnectBtnClicked');
                } else {
                    console.log('ti-core-backplane.connect: not in disconnected state, so ignoring command to connect.');
                }
            },
            connect: undefined,
            _disconnect: function(){
                this.updateStateMachine('onDisconnectBtnClicked');
            },
            disconnect: undefined,
            //provided for testing purposes
            /* returns true if state changed, false otherwise */
            _updateStateMachine: function (strEventName) {
                var result = false;
                var origStateName = this.currentState.name;
                var newStateName = this.currentState.events[strEventName];
                if (newStateName) {
                    console.log('ti-core-backplane: updateStateMachine event = ' + strEventName);
                    if (newStateName !== origStateName) {
                        this.prevState = this.currentState;
                        var newIndex = this.stateIndexes[newStateName];
                        this.currentState = this.states[newIndex];
                        console.log('ti-core-backplane: state change from ' + origStateName + ' to ' + newStateName);
                    }
                    result = true;
                } else {
                    console.log('OUT OF SEQUENCE updateStateMachine event: ' + strEventName)
                    console.log(this.currentState.events.length + ' valid event names for state=' + this.currentState.name + ':');
                    for (var i = 0; i < this.currentState.events.length; i++) {
                        console.log('event[' + i + ']=' + this.currentState.events[i].name);
                    }
                }

                return (result);
            },
            updateStateMachine: undefined,
            _updateProgress: function() {

                if (this.isStatusBar()) {
                    if (this.statusBar.progressBarEnabled) {
                        this.statusBar.iconEnabled = false;  // set here instead of relying on _progressBarEnabledChanged to avoid delays
                        this.progressPercent += 0.5;
                        if (this.progressPercent > 100.0) {
                            this.statusBar.progress = 100.0;
                        } else {
                            this.statusBar.progress = this.progressPercent;
                        }

                        var _self = this;
                        if (this.progressPercent < 300) {
                            this.myTimeout = window.setTimeout(function () {
                                _self.updateProgress()
                            }, 60);
                        } else {
                            this.hideProgressBar();
                            this.fire('onTimeoutWaitingForCloudAgent');
                        }
                    }
                }
            },
            updateProgress: undefined,

            _currentStateChanged: function () {
                if (this.initComplete) {
                    console.log('onCurrentStateChanged: currentState.name=' + this.currentState.name);
                    this.setStatus(this.currentState.statusString);
                    console.log('onCurrentStateChanged: status=' + this.status);
                    this.prevState = this.currentState;
                    switch (this.currentState.name) {
                        case 'disconnected':
                            this.isCloudAgentDownloadBtnVisible = false;
                            this.hideProgressBar();
                            if (this.isConnectedToCloudAgent) {
                                this.isConnectedToCloudAgent = false;
                            }
                            this.isConnectBtnVisible = true;
                            this.isDisconnectBtnVisible = false;

                            if (this.isStatusBar()) {
                                this.statusBar.iconImagePath = this.resolveUrl("./images/notconnected.gif");
                                //this.statusBar.iconName = 'ti-core-icons:nolink';
                                this.statusBar.iconEnabled = true;
                                if (!this.isErrorPending) {
                                    this.setIcon('ti-core-icons:nolink');
                                    this.tooltipIconImage = "Click to Connect to Hardware."
                                    this.statusString1 = "Hardware Not Connected.";
                                    this.statusString2 = "";
                                    this.statusString3 = "";
                                }
                                this.isErrorPending = false;
                            }

                            this.fire('btnVisibilityChanged');
                            this.fire('connectionStatusChanged');
                            break;

                        case 'connectingToCloudAgent':
                            if ((this.selectedDevice !== undefined) && (this.selectedDevice !== null) && (this.selectedDevice.deviceName !== undefined) && (this.selectedDevice.deviceName !== 'none')) {

                                this.isCloudAgentDownloadBtnVisible = false;
                                this.isConnectBtnVisible = false;
                                this.isDisconnectBtnVisible = true;
                                this.statusString1 = "Connecting to TI Cloud Agent..."
                                this.statusString2 = "";
                                this.tooltipIconImage = "Connecting...";
                                this.fire('btnVisibilityChanged');
                                this.progressPercent = 0.0;
                                if (this.isStatusBar()) {
                                    this.statusBar.progress = 0;
                                    this.statusBar.progressBarEnabled = true;
                                }
                                var _self = this;
                                this.myTimeout = window.setTimeout(function () {
                                    _self.updateProgress();
                                }, 60);
                                this.initAgent(function (error) {
                                    if (error) {
                                        console.log('ti-core-backplane: "Call to initAgent returned an error."');
                                        _self.setStatus("Could not communicate with TI Cloud Agent.");
                                        _self.updateStateMachine('onFailedToConnect');

                                    } else {
                                        console.log('ti-core-backplane: Call to initAgent succeeded. this.currentState.name=' + _self.currentState.name);
                                        _self.updateStateMachine("onCloudAgentConnected");
                                    }
                                });
                            } else {
                                var errMsg = "selectedDevice is undefined";
                                try {
                                    if (this.selectedDevice) {
                                        if (this.selectedDevice.deviceName === undefined) {
                                            errMsg = "selectedDevice.deviceName is undefined";
                                        } else if (this.selectedDevice.deviceName === null) {
                                            errMsg = "selectedDevice.deviceName is null";
                                        } else {
                                            errMsg = "selectedDevice.deviceName = " + this.selectedDevice.deviceName;
                                        }
                                    }
                                }
                                catch(ex){

                                }
                                console.log("ti-core-backplane error: "+errMsg+".  Setting statusString1 = Project Configuration Error");
                                this.setErrorStatus("Project Configuration Error.","Please specify a device name in your project properties.");
                            }

                            break;
                        /* ready: in this state, we have connected to the TI Cloud Agent.  The initDS function can be called at this point
                         to connect to the debug server and target.
                         */
                        case 'ready':
                            if (this.autoHideProgressBar) {
                                this.hideProgressBar();
                            }
                            if (this.isStatusBar()) {
                                this.statusBar.iconImagePath = this.resolveUrl("./images/connected.gif");
                                //this.statusBar.iconName = 'ti-core-icons:link';
                                this.statusString1 = "Connected to TI Cloud Agent.";
                                this.tooltipIconImage = "Click to Disconnect.";
                                this.setIcon('ti-core-icons:link');

                            }
                            this.isCloudAgentDownloadBtnVisible = false;
                            this.isConnectBtnVisible = false;
                            this.isDisconnectBtnVisible = true;
                            this.isConnectedToCloudAgent = true;
                            this.fire('connectionStatusChanged');
                            this.fire('btnVisibilityChanged');
                            break;
                        case 'failedToConnect':
                            if (!this.isDesktop) {
                                this.updateStateMachine('onOpenInstallDialog');
                            } else {
                                // in node-webkit, so we will never have to download the TI Cloud Agent.
                                // simply go to disconnect state.
                                this.updateStateMachine('disconnect');
                            }
                            break;
                        case 'downloadTICloudAgent':
                            if (this.ds !== undefined) {
                                this.ds = undefined;
                            }
                            this.isConnectBtnVisible = true;
                            this.isDisconnectBtnVisible = false;
                            this.isConnectedToCloudAgent = false;
                            this.isCloudAgentDownloadBtnVisible = true;
                            if (this.isStatusBar()) {
                                this.statusBar.progressBarEnabled = false;
                                this.statusBar.iconImagePath = this.resolveUrl("./images/notconnected.gif");
                                this.statusBar.iconEnabled = true;
                                //this.statusBar.iconName = 'ti-core-icons:nolink';
                                this.setIcon('ti-core-icons:nolink');
                                this.tooltipIconImage = "Click to Connect to Hardware."

                                this.statusString1 = "";
                            }
                            this.hideProgressBar();
                            if ((this.installDialog.errors !== undefined)&&(this.installDialog.errors !== null) && (this.installDialog.errors.length > 0)) {
                                this.installDialog.toggle();
                                this.fire('openingCloudAgentInstallDialog');
                            }

                            this.fire('btnVisibilityChanged');

                            break;
                        case 'error':
                            // halt all further connection progress in order to alert user of critical error
                            this.isErrorPending = true;
                            this.updateStateMachine('gotoNextState');
                            break;
                        case 'disconnect':
                            this.isDisconnectBtnVisible = false;
                            this.hideProgressBar();  // this enables responding to iconclicked events on the status bar's connect icon
                            var _self = this;
                            if ((this.ds !== undefined) && (this.ds !== null) && ( this.isDebugServerConfigured)){
                                console.log('ti-core-backplane.disconnect: about to deConfigure...');
                                this.ds.deConfigure().fin(function(){
                                    this.isDebugServerConfigured = false;
                                    this.ds = undefined;
                                    this.core = undefined;
                                    console.log("ds.deConfigure callback successful. Disconnect OK.")
                                    _self.updateStateMachine('disconnectComplete');
                                });
                                /*.fail(function(error){
                                 console.log("Failed to disconnect: error.message = "+error.message);
                                 window.location.reload(true);
                                 });
                                 */
                            } else {
                                _self.updateStateMachine('disconnectComplete');
                            }
                            break;

                    }
                    if (this.currentState.waitForUser) {
                        this.fire('currentStateUpdated');
                    }
                }
            },
            currentStateChanged: undefined,
            _onInstallerDialogClosed: function () {
                this.fire('closingCloudAgentInstallDialog');
                console.log("backplane._onInstallerDialogClosed.")
               // this.updateStateMachine('onInstallerDownloaded');
            },
            _downloadTICloudAgentInstaller: function () {
                if ((this.selectedDevice !== undefined)&&(this.selectedDevice !== null)&& (this.selectedDevice.deviceName !== undefined) && (this.selectedDevice.deviceName !== 'none')) {
                    //this.installDialog.errors = [TICloudAgent.AgentNotStarted];
                    this.installDialog.errors = [];
                    this.installDialog.errors.push(TICloudAgent.InvalidAgentVersion)
                    this.updateStateMachine('onFailedToConnect');
                } else {
                    this.status = "Error - no device name specified.  Could not download installer.";
                    this.statusBar.iconEnabled = true;
                    console.log("ti-core-backplane.downloadTICloudAgentInstaller: CONFIGURATION ERROR: selectedDevice property is undefined. ");
                }
            },
            downloadTICloudAgentInstaller: undefined,
            _installBrowserExtension: function() {
                if ((this.selectedDevice !== undefined)&&(this.selectedDevice !== null)&& (this.selectedDevice.deviceName !== undefined) && (this.selectedDevice.deviceName !== 'none')) {
                    this.installDialog.errors = [];
                    this.installDialog.errors.push(TICloudAgent.MissingExtension);
                    this.updateStateMachine('onFailedToConnect');
                } else {
                    this.status = "Error - no device name specified.  Could not install browser extension.";
                    console.log("ti-core-backplane._installBrowserExtension: CONFIGURATION ERROR: selectedDevice property is undefined.");
                }
            },
            installBrowserExtension: undefined,
            _initAgent: function( callback) {
                if ((this.selectedDevice !== undefined)&&(this.selectedDevice !== null)&& (this.selectedDevice.deviceName !== undefined) && (this.selectedDevice.deviceName !== 'none')) {
                    var _self = this;
                    var ok = true;
                    var pathToCcxmlFile = undefined;
                    // only call TICloudAgent.Init() once.
                    // Note: use Q.Promise so that .fail is supported (causes exception if you just use Promise)
                    var agentPromise = Q.Promise.resolve(this.agent);
                    if ((this.agent === undefined) || (this.agent === null)) {
                        try {
                            agentPromise = TICloudAgent.Init();
                        }
                        catch(ex){
                            var msg = ex.toString();
                            console.log("TICloudAgent.Init threw an exception: ex="+ex.toString());
                            ok = false;
                            this.setErrorStatus("TICloudAgent.Init Error",msg);
                        }
                    }
                    if (!ok) return;
                    console.log("ti-core-backplane: Starting TI Cloud Agent...");
                    agentPromise.then(function (newAgent) {
                        if ((_self.agent === undefined) || (_self.agent === null)) {
                            _self.agent = newAgent;
                        }
                        return _self.agent.getSubModule("File");
                    }).then(function (fileObj) {
                        _self.file = fileObj;
                        console.log("ti-core-backplane: agent.getSubModule(File) completed");
                        // At this point, it's ok to have %SERIALPORT% in the .ccxml file, as it is only used
                        // to determine the target device/cpu name and connection type
                        return TICloudAgent.Util.encodeAsBase64(_self.selectedDeviceCcxmlString);
                    }).then(function (data) {
                        return _self.file.write(_self.selectedDevice.deviceName + ".ccxml", data)
                    }).then(function (filePath) {
                        pathToCcxmlFile = filePath.path;
                        return _self.agent.getSubModule("TargetSupport");
                    }).then(function (targetSupport1) {
                        console.log("ti-core-backplane: agent.getSubModule(TargetSupport) completed");
                        var retObj;
                        if (_self.isDesktop) {
                            // Don't call TargetSupport.add if working in node-webkit environment.
                            // This removes the need to support .ccxmlString values that reference cpus
                            // instead of devices.  See win32/TICLoudAgent/src/installer/installer.js and ccxml.js
                            // If this test is node done, then the key that is generated for cpus is
                            // null_uart_connection which is not found in win32/TICloudAgent/db/Targets.json
                            retObj = Q.Promise.resolve(true);
                        } else {
                            targetSupport1.addListener("progress",function(eventObjData){
                                if (eventObjData) {
                                    var msg = eventObjData.subActivity;
                                    var isComplete = eventObjData.isComplete;
                                    var os = _self.getOS();
                                    console.log("ti-core-backplane:cloudAgentProgress = "+msg);

                                        if  ((os === TICloudAgent.OS.WIN) && (msg.toLowerCase().indexOf("please accept the uac dialog") >= 0)) {
										    if (_self._statusBar._toastMaxHeight) {
                                            	_self.statusBar.showToastMessage("Please click on the flashing ", +10000, " icon in the Windows task bar and accept installation of drivers to access your target device.","images/UAC.png","100px" );
											}
                                        }
                                        if (!isComplete) {
                                            _self.statusBar.statusString2 = msg;
                                        } else {
                                            _self.statusBar.statusString2 = "";
                                        }
                                }

                            });
                            retObj = targetSupport1.add(pathToCcxmlFile);
                        }
                        return retObj;
                    }).then(function (promiseObj) {
                        if (!_self.isDesktop) {
                            console.log("ti-core-backplane: TargetSupport.add(" + _self.selectedDevice.deviceName + "/" + _self.selectedDevice.xmlDeviceName + ") completed");
                        }
                        // return _self.agent.getSubModule("DS", _self.selectedDevice.deviceName);
                        return _self.agent.getSubModule("DS");
                    }).then(function (ds1) {
                        _self.ds = ds1;
                        console.log("agent.getSubModule(DS) completed. initAgent successful.");
                        if ((callback !== undefined) && (callback !== null)) {
                            callback(null);
                        }
                    }).fail(function (error) {

                        var msg = error;
                        if ((error !== undefined) && (!Array.isArray(error))) {
                            if (error.message !== undefined) {
                                msg = error.message;
                            } else if (error.msg !== undefined) {
                                msg = error.msg;
                            }
                            console.log("Fail to initAgent. error.message=" + msg);
                        }
                        _self.hideProgressBar();
                        _self.installDialog.errors = [];
                        if ((typeof proocess === 'undefined') && (Array.isArray(error))) {
                            for (var i=0; i < error.length; i++) {
                                // Don't need to do notifyPath on installDialog.errors as it is not used in the template
                                _self.installDialog.errors.push(error[i]);
                                msg = _self.installDialog.errors[0].msg;
                                if (error[i] instanceof TICloudAgent.InvalidAgentVersion) {
                                    console.log("Failed to init agent: Invalid Agent Version");
                                } else if (error[i] instanceof TICloudAgent.MissingExtension) {
                                    console.log("Failed to init agent: Missing Extension");
                                } else if (error[i] instanceof TICloudAgent.AgentNotStarted) {
                                    console.log("Failed to init agent: " + "Agent Not Started ");
                                } else {
                                    console.log("Failed to init agent:  " + "Unknown Error " + msg);
                                }
                            }
                        } else {
                            if (Array.isArray(error)){
                                msg = error[0].msg;
                            }
                            _self.setErrorStatus("TICloudAgent.Init Error",msg);
                            console.log("Failed to init agent:  " + "Error = " + msg);
                        }
                        if ((callback !== undefined) && (callback !== null)) {
                            callback(error);
                        }

                    });
                } else {
                    _self.hideProgressBar();
                    if ((callback !== undefined) && (callback !== null)) {
                        callback("No device selected.");
                    }
                }

            },
            initAgent: undefined,
            _setIcon: function(name){
                if (this.isStatusBar()) {
                    this.statusBar.setIconName(name);
                }
            },
            setIcon: undefined,
            _getIcon: function(){
                if (this.isStatusBar()) {
                    this.statusBar.getIconName(name);
                }
            },
            getIcon: undefined,
            _restoreIcon: function(){
                if (this.isConnectedToCloudAgent){
                    this.setIcon('ti-core-icons:link');
                } else {
                    this.setIcon('ti-core-icons:nolink');
                }
            },
            restoreIcon: undefined,
            /**
             * configureDebugServer: initialize the debug server and connect to the target.
             * @param ccxmlFileName: name to use when storing the ccxml string in the local file system (no path)
             * @param ccxmlString: content of the ccxml file.  For UART, must contain resolved serial port to use
             * @param autorun: if true, target will run automatically after connecting to the target
             * @param runFree: if true and autorun is true, target will run free automatically after connecting to the target.
             * @param callback: callback function that takes an 'error' parameter.
             *           error===null indicates success, error.message contains error text.
             */
            _configureDebugServer: function (ccxmlFileName, ccxmlString, autorun, runFree, callback) {
                if ((this.selectedDevice !== undefined)&&(this.selectedDevice !== null) && (this.selectedDevice.deviceName !== undefined) && (this.selectedDevice.deviceName !== 'none')){
                    var _self = this;
                    // use new to ensure that the callback function is bound to the backplane object's 'this'
                    if (this.agent === undefined){
                        console.log('ti-core-backplane: "TI Cloud Agent not initialized"');
                        this.setStatus("Could not communicate with TI Cloud Agent.");
                        //    Unable to communicate with TI Cloud Agent running on your computer.
                        // if ((_self.myTimeout !== undefined)&&(_self.myTimeout !== null)){
                        //     window.clearTimeout(_self.myTimeout);
                        // }
                        this.updateStateMachine('onFailedToConnect');

                    } else {
                        if (ccxmlString.indexOf('%SERIALPORT%') < 0) {
                            // if the debug server has previously been configured, deConfigure it to avoid throwing an error
                            var firstPromise = Q.Promise.resolve(true);
                            if ((this.ds !== undefined) && (this.ds !== null) && (this.isDebugServerConfigured)) {
                                firstPromise = this.ds.deConfigure();
                            }
                            // .fin is the same as finally, i.e. it executes even if there is an error
                            firstPromise.fin(function () {
                                _self.isDebugServerConfigured = false;
                                TICloudAgent.Util.encodeAsBase64(ccxmlString).then(function (data) {
                                    return _self.file.write(ccxmlFileName, data)
                                }).then(function (retObj) {
                                    return _self.ds.configure(retObj.path);
                                }).then(function (retObj) {
                                    _self.isDebugServerConfigured = true;
                                    _self.cores = retObj.cores;
                                    return _self.ds.getSubModule(_self.cores[0]);
                                }).then(function (core1) {
                                    _self.core = core1;
                                    return _self.core.targetState.connect();
                                }).then(function (retObj) {
                                    var promiseObj = Q.Promise.resolve(true);
                                    if (autorun) {
                                        promiseObj = _self.core.targetState.run(runFree); // runFree = true specifies runFree
                                    }
                                    return promiseObj;
                                }).then(function (retObj) {
                                    _self.statusString1 = "Connected to target.";
                                    _self.setIcon("ti-core-icons:link");
                                    if (callback !== undefined) {
                                        callback(null);
                                    }
                                }).fail(function (err) {
                                    _self.hideProgressBar();
                                    if ((err) && (err.message !== undefined)) {
                                        if ((err.message.indexOf("already configured") >= 0) ||
                                                (err.message.indexOf("already connected") >= 0)) {
                                            _self.updateStateMachine("onCloudAgentConnected");
                                            self.isDebugServerConfigured = true;
                                            
                                            callback(null);
                                        } else {
                                            _self.isDebugServerConfigured = false;

                                            console.log("Error configuring ds: err=" + err.message);
                                            _self.setErrorStatus("TICloudAgent Config Error:", err.message);
                                            _self.ds.deConfigure();
                                            callback(err);
                                        }
                                    } else {
                                        _self.isDebugServerConfigured = false;
                                        console.log("Error configuring ds: unknown error");
                                        var eMsg = "unknown error";
                                        if (err) {
                                            eMsg = err;
                                        }
                                        _self.setErrorStatus("TICloudAgent Config Error:", eMsg);
                                        _self.ds.deConfigure();
                                        callback(err);
                                    }

                                });
                            });
                        } else {
                            _self.hideProgressBar();
                            console.log('ti-core-backplane.configureDebugServer: ERROR - ccxml string contains %SERIALPORT% - must resolve before calling.')
                            callback('ccxml string contains %SERIALPORT% - must resolve before calling');

                        }
                    }
                } else {
                    this.hideProgressBar();  // this enables responding to iconclicked events on the status bar's connect icon
                    if ((callback !== undefined) && (callback !== null)) {
                        callback('ti-core-backplane: no device selected.');
                    }
                }
            },
            configureDebugServer: undefined,
            getOS: function(){
                var os = TICloudAgent.OS.LINUX;
                if (navigator.appVersion.indexOf("Mac")!=-1) os=TICloudAgent.OS.OSX;
                if (navigator.appVersion.indexOf("Win")!=-1) os=TICloudAgent.OS.WIN;
                return os;
            },
            _onStatusBarClickHdlr: function(event){
                console.log('ti-core-backplane: statusBar pointer up event received.');
                if (this.isStatusBar()) {
                    if (this.statusBar.getIconName() === "error"){
                        this.setIcon("ti-core-icons:nolink");
                        this.statusBar.iconEnabled = true;
                        this.tooltipIconImage = "Click to Connect to Hardware."
                    }
                    if (this.statusBar.iconEnabled) {
                        this.statusString1 = '';
                        this.statusString2 = '';
                        if (this.currentState.name === 'disconnected') {
                            this.updateStateMachine('onConnectBtnClicked');
                            this.statusBar.iconEnabled = false;
                        } else {
                            if ((this.currentState.name === 'ready') || (this.currentState.name === 'downloadTICloudAgent')) {
                                this.updateStateMachine('onDisconnectBtnClicked');
                            }
                        }
                    }
                }
            },
            onStatusBarClickHdlr: undefined,
            httpGet: function(theUrl,responseType) {
                /* new async version: */
                var deferred = Q.defer();
                var xmlhttp = new XMLHttpRequest();
                xmlhttp.onreadystatechange = function () {
                    var successStatusCode = 200;
                    /* TODO: Polymer 1.2 - double check that the node-webkit version reads files the same as dev.ti.com
                     if (typeof process !== "undefined") {
                     // node-webkit app
                     successStatusCode = 0;
                     }
                     */
                    if (xmlhttp.readyState === 4 && xmlhttp.status == successStatusCode) {

                        deferred.resolve(xmlhttp.responseText);
                    }
                };

                xmlhttp.open("GET", theUrl, true);  // async request specified by 3rd param = true
                if (responseType) {
                    xmlhttp.responseType = responseType;
                } else {
                    xmlhttp.responseType = 'text';
                }
                xmlhttp.send();

                return deferred.promise;
                /* old synchronous code:
                 var xmlHttp =  new XMLHttpRequest();
                 xmlHttp.open("GET", theUrl, false);
                 xmlHttp.send(null);
                 return xmlHttp.responseText;
                 */
            },
            isFireFox: function(){
                return navigator.userAgent.indexOf("Firefox") !== -1;
            },
            initComplete: false,
            _reset: function() {
                this.localServerInfo = {
                    port: null,
                    version: "0"
                };
                this.portFailure = null;
                this.portRequested = false;
                this.ds = null;
            },
            reset: undefined,
            
           pingJSONFile: function(file, callback) {

			  var xhr = new XMLHttpRequest();
			  xhr.open("GET",file);
			  xhr.onload = function () {
				if(xhr.readyState == 4 && xhr.status == 200) {
					/*Check if response is json string*/
				    try {
				        JSON.parse(xhr.response);
					    callback(file);
				    } catch (e) {
					   callback(null);
				    }
				 } else {
				   callback(null);
				 }
			  };
			  xhr.onerror = function () {
			    callback(null);
			  };
			  xhr.send();

            },
            getComponentsFolderUrl: function(){
                var scripts = document.getElementsByTagName("script");
                var url;
                var i = 0;
                var result;
                var found = false;
                while ((!found) && (i < scripts.length)){
                    url = scripts[i++].src;
                    if ( (url) && (url.indexOf("webcomponentsjs") > 0) || ((url.indexOf("/ti-") > 0) && (url.indexOf("gc") > 0))){
                        found = true;
                    }
                }
                if (!found){
                    url = document.URL;
                    if ((url) && (url.indexOf("/gc/") > 0)){
                        found = true;
                    }
                }
                if (found) {
                    if (url.indexOf('webcomponentsjs') >= 0) {
                        result = url.split('webcomponentsjs')[0];
                    } else {
                        // the following line does not work for webservers that contain gc in their name (e.g. https://vmtgccscloud00.toro.design.ti.com/gc
                        // location = url.split('gc')[0]+'gc/components/'+location;
                        var index = url.lastIndexOf('gc/');
                        if (index > 0) {
                            result = url.substring(0, index) + 'gc/components/';
                        } else {
                            found = false;
                        }
                    }
                }
                if (!found) {
                    throw("Could not find supported_devices.json file - scripts[0] URL = "+scripts[0]);
                }
                if (result && (!result.endsWith('/') && (!result.endsWith('\\')))){
                    result = result + '/';
                }
                return result;
            },
			getSupportedDevicesList: function(){
                var _self = this;
                return Q.promise(function(resolve){
                    var location = "/ticloudagent/getConfigInfo?os="+_self.getOS();
                    resolve(_self.httpGet(location,'text'));
                }).then(function(fileContents){
                    var result = "";
                    try {
                        result = JSON.parse(fileContents);
                    }
                    catch(ex) {
                        console.log("ti-core-backplane.getSupportedDevicesList: exception=" + ex);
                    }
                    return result;
                });
            },
            getDeviceCcxmlFile: function(deviceObj,connectionObj){
                var _self = this;
                return Q.promise(function(resolve){
                    var url = "/ticloudagent/getConfig/"+_self.getOS()+'/'+connectionObj.xmlFile+'/'+deviceObj.xmlFile;
                    resolve(_self.httpGet(url,'text'));
                });
            },
            setSelectedDevice: function(deviceName){
                var deviceName_UC = deviceName.toUpperCase();
                var jsonFilePath = '';
                var _self = this;
                return Q.promise(function(resolve) {
                    var fileContents = '';
                    if (_self.isDesktop) {
                        // use the supported_devices.json file in the target folder if it exists
                        jsonFilePath = gc.desktop.getPathToSupportedDevicesJson(true);
                        if (!jsonFilePath) {
                            jsonFilePath = gc.desktop.getPathToSupportedDevicesJson(false);
                        }
                        fileContents =  gc.desktop.readFileSync(jsonFilePath);
                        resolve(fileContents);

                    } else {
                        // TODO: Polymer 1.2 - need to figure out the best way to specify path to supported_devices.json file
                        // Needs to be able to work when connecting to target using the ti-target-config-dialog

						// This code looks for a supported_devices.json file within the same directory as containing page. If it doesnot exist
						// It defaults to the backplane/supported_devices.json file.  
						// This is so we can have the backplane/supported_devices.json as the master copy and then allow pages to override it locally. 
						_self.pingJSONFile('./supported_devices.json', function (file) {
							  var location = "./supported_devices.json";
							  if (!file) { 
							        location = "ti-core-backplane/supported_devices.json";
                                    var baseUrl = _self.getComponentsFolderUrl();
                                    location = baseUrl + location;
							  }
							  resolve(_self.httpGet(location,'text'));
						  
						});
						
                    }
                }).then(function(fileContents){
                    if (!fileContents){
                        throw "supported_devices.json file could not be read";
                    }
                    if (fileContents.length <= 0){
                        throw "supported_devices.json length = "+fileContents.length;
                    }
                    console.log('supported_devices read from ' + jsonFilePath+', file length = '+fileContents.length);

                    _self.supportedDevices = JSON.parse(fileContents);
                    // get the ccxml contents for the selected device
                    if (_self.supportedDevices.devices[deviceName_UC] !== undefined) {
                        _self.selectedDevice.deviceName = deviceName_UC;
                        _self.selectedDevice.connectionID = _self.supportedDevices.devices[deviceName_UC].connectionID;
                        _self.selectedDevice.runTargetToReadMemory = _self.supportedDevices.devices[deviceName_UC].runTargetToReadMemory;
                        if (_self.supportedDevices.devices[deviceName_UC].runFree !== undefined) {
                            _self.selectedDevice.runFree = _self.supportedDevices.devices[deviceName_UC].runFree;
                        } else {
                            _self.selectedDevice.runFree = false;
                        }
                        var ccxmlName = _self.supportedDevices.devices[deviceName_UC].ccxml;
                        var xmlDeviceName = _self.supportedDevices.devices[deviceName_UC].xmlDeviceName;
                        _self.selectedDevice.xmlDeviceName = xmlDeviceName;
                        _self.selectedDeviceCcxmlString = _self.supportedDevices[ccxmlName].join('\n');
                        _self.selectedDeviceCcxmlString = _self.selectedDeviceCcxmlString.replace(/\%DEVICE\%/g, xmlDeviceName);
                    }

                }).fail(function(error){
                    console.log('ti-core-backplane: exception reading supported_devices.json from filepath='+jsonFilePath+', error='+error);
                    var errMsg = "Error reading supported_devices.json file";
                    _self.hideProgressBar();
                    _self.updateStateMachine('onError');
                    _self.statusString1 = errMsg;
                    _self.statusString2 = jsonFilePath;
                    resolve();
                });
            },
            _isStatusBar: function(){
                var statusBarFound = ((this.statusBar !== undefined)&&(this.statusBar !== null));
                if (!statusBarFound) {
                    if ((this.parentNode !== undefined) && (this.parentNode !== null)) {
                        this.statusBar = Polymer.dom(this.parentNode).querySelector("ti-widget-statusbar");
                    }
                    if ((this.statusBar === undefined)||(this.statusBar === null)) {
                        this.statusBar = Polymer.dom(window.document).querySelector("ti-widget-statusbar");
                    }
                    if((this.statusBar === undefined)||(this.statusBar === null)) {
                        if ((gc)&&(gc.services)) {
                            if (gc.services['ti-widget-statusbar']) {
                                this.statusBar = gc.services['ti-widget-statusbar'];
                            }
                        }
                    }
                    if ((this.statusBar !== undefined)&&(this.statusBar !== null) && (this.statusBar.initialized)) {
                        statusBarFound = true;
                        this.statusBar.showProgressPercentString = false;
                        this.statusBar.addEventListener("iconclicked", this.onStatusBarClickHdlr);
                        this.statusBar.iconImagePath = this.resolveUrl("./images/notconnected.gif");
                        //this.statusBar.iconName = 'ti-core-icons:nolink';
                        this.setIcon('ti-core-icons:nolink');
                        this.tooltipIconImage = "Click to Connect to Hardware."

                    }
                }
                return statusBarFound;
            },
            isStatusBar: undefined,
            ready: function () {
                console.log('ti-core-backplane ready function called');
                this.isDesktop = gc.desktop.isDesktop();
                this.enteredView();
                // this.addEventListener("valueChanged",dialValueChangedHandler,false);


            },

            // see https://groups.google.com/forum/#!searchin/polymer-dev/binding/polymer-dev/wzfxU9vVAg0/1sFyrmnxy5EJ for info on why initialization is not
            // considered complete until either enteredView or created is called
            enteredView: function () {
                this.progress = 0;
                this.style.position = 'static';
                var _self = this;
                this.target = {
                    getName: function() {
                        return _self.selectedDevice.deviceName;
                    },
                    getSizeOfInt: function() {
                        return "2";
                    },
                    getCCXMLFileName: function() {
                        return _self.selectedDevice.deviceName+".ccxml";
                    }
                };
                if (!this.initComplete) {

                    this.stateIndexes = {};
                    for (var i = 0; i < this.states.length; i++) {
                        this.stateIndexes[this.states[i].name] = i;
                    }
                    this.currentState = this.states[0];
                    this.prevState = this.currentState;
                    // Ensure that 'this' in the following functions is bound to the backplane object:
                    this.updateProgress = this._updateProgress.bind(this);
                    this.progressBarEnabledChanged = this._progressBarEnabledChanged.bind(this);
                    this.hideProgressBar = this._hideProgressBar.bind(this);
                    this.updateStateMachine = this._updateStateMachine.bind(this);
                    this.setStatus = this._setStatus.bind(this);
                    this.setErrorStatus = this._setErrorStatus.bind(this);
                    this.currentStateChanged = this._currentStateChanged.bind(this);
                    this.configureDebugServer = this._configureDebugServer.bind(this);
                    this.downloadTICloudAgentInstaller = this._downloadTICloudAgentInstaller.bind(this);
                    this.installBrowserExtension = this._installBrowserExtension.bind(this);
                    this.initAgent = this._initAgent.bind(this);
                    this.onStatusBarClickHdlr = this._onStatusBarClickHdlr.bind(this);
                    this.connect = this._connect.bind(this);
                    this.disconnect = this._disconnect.bind(this);
                    this.reset = this._reset.bind(this);
                    this.setIcon = this._setIcon.bind(this);
                    this.getIcon = this._getIcon.bind(this);
                    this.restoreIcon = this._restoreIcon.bind(this);
                    this.isStatusBar = this._isStatusBar.bind(this);
                    this.readProjectJson = this._readProjectJson.bind(this);
                    this.initComplete = true;
                }


            },
            // readProjectJson is called from elements/designer-elements when a new project has been loaded
            _readProjectJson: function(){
                if ((gc)&&(gc.fileCache)){
                    var _self = this;
                    var fileName = 'project.json';
                    // if in the designer, then gc.fileCache.readJsonFile will prepend with the path to the project folder.
                    gc.fileCache.readJsonFile(fileName).then(function(manifest) {
                        if (manifest.device_name){  // handle case where tiBrandingEnabled is not defined
                            console.log('ti-core-backplane: setting selectedDevice.deviceName = '+manifest.device_name)
                        } else {
                            console.log('ti-core-backplane: project.json does not contain deviceName property.')
                        }

                    }).fail(function(err){
                        console.log('ti-core-backplane: error reading project.json file.  err = '+err);
                    });
                }
            },
            readProjectJson: undefined,
            installDialog: undefined,
            domReady: function(){
                // get statusbar if it exists
                if (!this.isStatusBar()){
                    console.log('ti-core-backplane.domReady: Could not find ti-widget-statusbar! Please add this component to your design.')
                }
                this.readProjectJson();
            },
            attached: function() {
                // register the core backplane for others to use
                gc.services = gc.services || {};
                gc.services['ti-core-backplane'] = this;
                this.async(function(){
                    this._inDesigner = false;
                    if ((window.parent)&&(window.parent.document) && window.parent.document.querySelector('#designer')){
                        this._inDesigner = false;
                        // clear out the status strings to avoid showing misleading errors when in the designer
                        if (this._isStatusBar()) {
                            this.statusBar.statusString1 = "";
                            this.statusBar.statusString2 = "";
                            this.statusBar.statusString3 = "";
                        }
                    }
                    if (!this.installDialog) {
                        this.installDialog = document.querySelector('ti-core-backplane-installdialog');
                        if (!this.installDialog) {
                            this.installDialog = document.createElement('ti-core-backplane-installdialog');
                            document.body.appendChild(this.installDialog);
                        }
                    }
                    this.installDialog._backplane = this;
                    document.dispatchEvent(new CustomEvent("ti-core-backplane-ready", { "detail": "Backplane is Ready" }));
                    this.domReady();
                }.bind(this),1)
                
                
                /* Post Analytics*/
				var params = {
					'action': 'backplaneLoad',
					'appName': 'ti-core-backplane',
					'appVersion':'1.2',
					'data': {'url': window.location.href}
				};
		
				this.postData(JSON.stringify(params), true);
                
                
            },
            postData : function (params, async, callback) {
				var xhr = new XMLHttpRequest();
				xhr.open('POST', '/analytics', async);
				
				//Send the proper header information along with the request
				xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");
			
				xhr.onreadystatechange = function() {
					if (xhr.readyState == 4 && xhr.status == 200) {
						if (callback) {
							callback(xhr.responseText);
						}
					}
				};
				
				xhr.send(params);
			},
            detached: function() {
                if (gc.services['ti-core-backplane'] === this) {
                    gc.services['ti-core-backplane'] = undefined;
                }
            }
        });


    </script>

</dom-module>
